// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package biz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BizServiceClient is the client API for BizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizServiceClient interface {
	Execute(ctx context.Context, in *BizRequest, opts ...grpc.CallOption) (*BizResponse, error)
}

type bizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBizServiceClient(cc grpc.ClientConnInterface) BizServiceClient {
	return &bizServiceClient{cc}
}

func (c *bizServiceClient) Execute(ctx context.Context, in *BizRequest, opts ...grpc.CallOption) (*BizResponse, error) {
	out := new(BizResponse)
	err := c.cc.Invoke(ctx, "/biz.BizService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizServiceServer is the server API for BizService service.
// All implementations must embed UnimplementedBizServiceServer
// for forward compatibility
type BizServiceServer interface {
	Execute(context.Context, *BizRequest) (*BizResponse, error)
	mustEmbedUnimplementedBizServiceServer()
}

// UnimplementedBizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBizServiceServer struct {
}

func (UnimplementedBizServiceServer) Execute(context.Context, *BizRequest) (*BizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedBizServiceServer) mustEmbedUnimplementedBizServiceServer() {}

// UnsafeBizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizServiceServer will
// result in compilation errors.
type UnsafeBizServiceServer interface {
	mustEmbedUnimplementedBizServiceServer()
}

func RegisterBizServiceServer(s *grpc.Server, srv BizServiceServer) {
	s.RegisterService(&_BizService_serviceDesc, srv)
}

func _BizService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biz.BizService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizServiceServer).Execute(ctx, req.(*BizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BizService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "biz.BizService",
	HandlerType: (*BizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _BizService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "biz.proto",
}
